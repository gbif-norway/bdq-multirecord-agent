Have a scan of the @README and look at bdq_api_service.py and main.py for some context as to how BDQ tests get run and the outputs we produce. Read the LLM prompt too, and pay close attention to how we generate the stats in main.py

Now we will build a simple, static HTML + JS dashboard for viewing BDQ test results.

- Hosted in s3 bucket at https://storage.gbif-no.sigma2.no/misc/bdqreport/
- Bucket should include:
  - styles.css
  - app.js
  - TG2_tests_small.csv (TG2_tests.csv with only the columns required)
  - bdq-report.html # Should import the above files using relative paths
  - results/ 
    - # Containing the unique_test_results files which get generated from bdq_api_service.py and main.py 
    - # Loaded into the html file using URL argument, like bdq-report.html?unique_test_results=unique_test_results.csv (should be in relative path results/ folder)
    - # Also contains summary stats

Stack:
- Fontawesome
- PappaParse
- Bootstrap 5.3 - IMPORTANT refer to the docs https://getbootstrap.com/docs/5.3/components/card/ while coding
- Chart.js

Spec:

Colour scheme: 
Green #0a7029
Yellow #fede00
Yellow Green #c8df52
Mint #dbe8d8

Simple header: <i class="fa-solid fa-robot"></i> <i class="fa-solid fa-robot"> </i><i class="fa-solid fa-robot"></i>  Biodiversity Data Quality Report from BDQEmail <greyed out>for Unique test results file</greyed out> 
 - Derive name based on file name, replace - or _ with spaces and use title case, concat with ' file'
 - First robot icon should be yellow, then yellow green, then mint
 - Subtle animation effect on hover over the robot icons 

Next, a set of cards which get a shadow effect on hover.
 - x records in dataset (number_of_records_in_dataset)
 - x tests across dataset (no_of_tests_run) across x columns (len(list_of_all_columns_tested))
 - x results (no_of_test_results)
 - x changes can be applied automatically (no_of_amendments + no_of_filled_in)
 - x corrections needing attention (no_of_unique_non_compliant_validations)
 - x fields with potential issues (no_of_unique_issues)

Next, a bar graph, heading "<i class="fa-regular fa-eye"></i> Needs attention". 
Tooltip on hover (Values a BDQ test has flagged as non-compliant or a possible potential issue) 
Populate with unique_results LEFT JOIN on TG2_tests_small.csv (based on test_id) - this should be a common file called uniqueResultsWithTestContextInfo. 
- Filter by: result = NOT_COMPLIANT or result = POTENTIAL_ISSUE or 
- Each bar should be number per IE Class. Get rid of the prefix and :, so e.g. dcterms:Location should display as Location.
- Each IE Class bar should be a colour in the range between Yellow #fede00 and Yellow Green #c8df52 (make it a gradient)

Next, a header with <i class="fa-solid fa-edit" style="color: #f59e0b; margin-right: 8px;"></i> Amendments automatically applied <small>(see your attached amendments csv in the email)<small>
Below, a list group of uniqueResultsWithTestContextInfo, filter by 
 - Amendment: where Response.status IN (AMENDED, FILLED_IN)
Paginate, show 10 per page

Next, a header with <i class="fa-solid fa-hand-sparkles"></i> Validations and issues
Below, a list group of uniqueResultsWithTestContextInfo, get contents filter by 
 - Validation: where Response.status = RUN_HAS_RESULT AND Response.result = NOT_COMPLIANT
 - Issue: where Response.status = RUN_HAS_RESULT AND Response.result IN (IS_ISSUE, POTENTIAL_ISSUE)
Paginate, show 10 per page
 
For each list_group we need:
test_id as a header (title case, replace '_' with ' ')
a badge with total count in it 
The description of the test
The top 5 actedUpon and consulted field combos + counts for each 
entire list_group should be clickable and should open a modal
- same info in modal, but include at the top the notes of the test and instead of top 5 we should have ALL combos + counts, paginate by 10



